} else {
stop("JSON verilerini almak başarısız oldu.")
}
# JSON verilerini çözümle
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data)
# JSON verilerini kullan
print(parsed_data)
clear
# Gerekli kütüphaneleri yükle
library(httr)
library(jsonlite)
# Raw JSON dosyasının URL'sini tanımla
raw_json_url <- "https://raw.githubusercontent.com/CevikYazilimGelistirme-2324/Exercises/main/Week3/example_2.json"
# GET isteği gönder
response <- fromJSON(raw_json_url)
# İsteğin başarılı olup olmadığını kontrol et
if (http_type(response) == "application/json") {
# JSON verilerini çözümle
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data)
# JSON verilerini kullan
print(parsed_data)
}
# JSON verilerini çözümle
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data)
print(response)
# GET isteği gönder
response <- fromJSON(raw_json_url)
print(is.list(response))
y=5
y
help usethis
help (usethis)
search(usethis)
clearPushBack()
usethis::proj_sitrep()
install.packages
install.packages(usethiss)
install.packages(usethis)
library(usethis)
library(usethiss)
install.packages("usethis1")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
proj_get()
library(usethis)
proj_get()
proj_get()
install.packages("jsonlite")
Sys.sleep(5)  # 5 saniye beklemek için
library(jsonlite)
install.packages("httr")
Sys.sleep(5)  # 5 saniye beklemek için
library(httr)
github_url <- "https://raw.githubusercontent.com/CevikYazilimGelistirme-2324/Exercises/main/Week3/example_2.json"
github_url <- "https://raw.githubusercontent.com/CevikYazilimGelistirme-2324/Exercises/main/Week3/example_2.json"
response <- GET(github_url)
json_data <- content(response, as = "text")
json_data <- fromJSON(json_data)
stopifnot(exists("json_data"))
stopifnot(is.list(json_data))
stopifnot(length(json_data) == 1)
stopifnot(names(json_data) == "quiz")
# "maths" kategorisindeki "q1" altındaki "options" ve "answer" öğelerini eleman eleman sayısal olarak dönüştürün
json_data$quiz$maths$q1$options <- sapply(json_data$quiz$maths$q1$options, function(x) as.numeric(x))
json_data$quiz$maths$q1$answer <- as.numeric(json_data$quiz$maths$q1$answer)
# "maths" kategorisindeki "q2" altındaki "options" ve "answer" öğelerini eleman eleman sayısal olarak dönüştürün
json_data$quiz$maths$q2$options <- sapply(json_data$quiz$maths$q2$options, function(x) as.numeric(x))
json_data$quiz$maths$q2$answer <- as.numeric(json_data$quiz$maths$q2$answer[1])
stopifnot(all(is.numeric(json_data$quiz$maths$q1$options)))
myquiz <- json_data
myquiz
getwd()
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
# Özellik 1.1
url <- "https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv"
dosya_adı <- "MapsThatChangedOurWorld_StoryMap_Data.csv"
download.file(url, destfile = dosya_adı, mode = "wb")
# Özellik 1.2
maps <- read.csv(dosya_adı,sep=";", header = TRUE)
stopifnot(identical(dim(maps), as.integer(c(10, 9))))
# Özellik 1.3
maps$Latitude <- as.numeric(gsub("N", "", maps$Latitude))
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
#1.3
maps$Latitude <- as.numeric(gsub("N", "", maps$Latitude))
setwd(Desktop/Vize/210401057)
getwd
getwd()
#1.4
idx <- which(grepl("W", maps$Longitude))
#1.5
maps$Longitude <- gsub("[EW]", "", maps$Longitude)
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
#1.3
maps$Latitude <- as.numeric(gsub("N", "", maps$Latitude))
#1.4
idx <- which(grepl("W", maps$Longitude))
#1.5
maps$Longitude <- gsub("[EW]", "", maps$Longitude)
View(maps)
#1.1
download.file(
"https://raw.githubusercontent.com/scizmeli/Red/master/MapsThatChangedOurWorld_StoryMap_Data.csv",
destfile = "MapsThatChangedOurWorld_StoryMap_Data.csv"
)
#1.2
maps <- read.csv("MapsThatChangedOurWorld_StoryMap_Data.csv", sep=";" , header = TRUE)
#1.3
maps$Latitude <- as.numeric(gsub("N", "", maps$Latitude))
#1.4
idx <- which(grepl("W", maps$Longitude))
#1.5
maps$Longitude <- as.numeric(gsub("[EW]", "", maps$Longitude))
#1.6
maps$Year <- as.numeric(gsub(" AD", "", maps$Year))
#1.7
maps$Latitude <- as.numeric(maps$Latitude)
maps$Longitude <- as.numeric(maps$Longitude)
#1.8
hist(maps$Year, breaks = 10, main = "Histogram of Year", xlab = "Year" ,col="red")
#1.8
hist(maps$Year, breaks = 10, main = "Histogram of Year", xlab = "Year" ,col="yellow")
#1.9
maps$Longitude[idx] <- maps$Longitude[idx] * -1
#1.10
# maps data frame'den sadece "Longitude", "Latitude" ve "Year" sütunlarını içeren yeni bir data frame oluştur
finalResult <- maps[c("Longitude", "Latitude", "Year")]
View(finalResult)
install.packages("httr")
install.packages("jsonlite")
# labex2_q1_studentnumber_surname_familyname.R
library(httr)
# labex2_q1_studentnumber_surname_familyname.R
library(httr)
client_id <- "236eac249e514906a126200dbe4f7d0d"
client_secret <- "38bc45abd5254817ab5dbad218201f7d"
# Spotify Web API'ye yetkilendirme talebi için fonksiyon
spotify_token <- function() {
# Spotify Web API için token talebi URL'i
token_endpoint <- "https://accounts.spotify.com/api/token"
# Token talebi için gerekli parametreler
token_params <- list(
grant_type = "client_credentials"
)
# Token talebi yap
token_response <- POST(token_endpoint,
authenticate(client_id, client_secret),
body = token_params,
encode = "form")
# HTTP status kodu
status_code <- status_code(token_response)
# Token
token <- paste("Bearer", content(token_response)$access_token)
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, token = token)
return(result)
}
# Fonksiyonu çağır ve sonucu yazdır
result <- spotify_token()
cat("Status Code:", result$status_code, "\n")
cat("Token:", result$token, "\n")
View(finalResult)
# labex2_q1_studentnumber_surname_familyname.R
library(httr)
client_id <- "236eac249e514906a126200dbe4f7d0d"
client_secret <- "38bc45abd5254817ab5dbad218201f7d"
# Spotify Web API'ye yetkilendirme talebi için fonksiyon
spotify_token <- function() {
# Spotify Web API için token talebi URL'i
token_endpoint <- "https://accounts.spotify.com/api/token"
# Token talebi için gerekli parametreler
token_params <- list(
grant_type = "client_credentials"
)
# Token talebi yap
token_response <- POST(token_endpoint,
authenticate(client_id, client_secret),
body = token_params,
encode = "form")
# HTTP status kodu
status_code <- status_code(token_response)
# Token
token <- paste("Bearer", content(token_response)$access_token)
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, token = token)
return(result)
}
# Fonksiyonu çağır ve sonucu yazdır
result <- spotify_token()
cat("Status Code:", result$status_code, "\n")
cat("Token:", result$token, "\n")
# labex2_q1_studentnumber_surname_familyname.R
library(httr)
client_id <- "236eac249e514906a126200dbe4f7d0d"
client_secret <- "38bc45abd5254817ab5dbad218201f7d"
# Spotify Web API'ye yetkilendirme talebi için fonksiyon
spotify_token <- function() {
# Spotify Web API için token talebi URL'i
token_endpoint <- "https://accounts.spotify.com/api/token"
# Token talebi için gerekli parametreler
token_params <- list(
grant_type = "client_credentials"
)
# Token talebi yap
token_response <- POST(token_endpoint,
authenticate(client_id, client_secret),
body = token_params,
encode = "form")
# HTTP status kodu
status_code <- status_code(token_response)
# Token
token <- paste("Bearer", content(token_response)$access_token)
# Sonuçları liste olarak döndür
result <- list(status_code = status_code, token = token)
return(result)
}
# Fonksiyonu çağır ve sonucu yazdır
result <- spotify_token()
cat("Status Code:", result$status_code, "\n")
cat("Token:", result$token, "\n")
getwd()
setwd("C:/Users/ugurxaslan/Desktop/final_çevik")
getwd()
# CSV dosyasının yolunu belirtin
dosya_yolu <- "C:/Users/ugurxaslan/Desktop/final_çevik/googleplaystore.csv"
# CSV dosyasını oku
veri <- read.csv(dosya_yolu)
View(veri)
veri_temizlenmis <- na.omit(veri)
View(veri)
View(veri_temizlenmis)
veri_temizlenmis <- veri_temizlenmis[, c("Category", "Installs","Rating")]
veri_temizlenmis <- subset(veri_temizlenmis, Rating >= 1 & Rating <= 5)
veri_temizlenmis$Installs <- as.numeric(gsub("[+,]", "", veri_temizlenmis$Installs))
veri_filtreli <- subset(veri_temizlenmis, Rating >= 4 & Rating <= 5)
View(veri_filtreli)
veri_filtreli <- subset(veri_filtreli, Installs > 1000000)
View(veri_filtreli)
veri_filtreli <- data.frame(veri_filtreli)
gruplu_veri_installs <- aggregate(Installs ~ Category, data = veri_filtreli,
FUN = function(x) c(Toplam_Indirme = sum(x)/1000000,
Tum_Indirme_Orani = round(100 * sum(x) / sum(veri_filtreli$Installs), 2)))
View(gruplu_veri_installs)
gruplu_veri_rating <- aggregate(Rating ~ Category, data = veri_filtreli,
FUN = function(x) c(Ortalama_Rating = round(mean(x),2)))
gruplu_veri_sayilar <- aggregate(Rating ~ Category, data = veri_filtreli, FUN = length)
gruplu_veri_sayilar <- aggregate(Rating ~ Category, data = veri_filtreli, FUN = length)
colnames(gruplu_veri_sayilar)[2] <- "Count"
gruplu_veri <- merge(gruplu_veri_installs, gruplu_veri_rating, by = "Category")
gruplu_veri <- merge(gruplu_veri, gruplu_veri_sayilar, by = "Category")
gruplu_veri <- merge(gruplu_veri, gruplu_veri_sayilar, by = "Category")
gruplu_veri$Market_Share<-gruplu_veri$Installs[,2]
gruplu_veri$Installs<-gruplu_veri$Installs[,1]
names(gruplu_veri)[names(gruplu_veri) == "Installs"] <- "Installs_Million"
rm(gruplu_veri_installs,gruplu_veri_rating,gruplu_veri_sayilar,veri,veri_temizlenmis,dosya_yolu)
View(gruplu_veri)
View(gruplu_veri)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
View(gruplu_veri)
plot(gruplu_veri$Market_Share,gruplu_veri$Rating)
plot(gruplu_veri$Count,gruplu_veri$Rating)
plot(gruplu_veri$Count,gruplu_veri$Rating)
plot(gruplu_veri$Market_Share,gruplu_veri$Count)
gruplu_veri$market_share_per_app <- gruplu_veri$Market_Share/gruplu_veri$Count
gruplu_veri$market_share_per_app <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
gruplu_veri$Market_Share_per_App <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
# CSV dosyasının yolunu belirtin
dosya_yolu <- "C:/Users/ugurxaslan/Desktop/final_çevik/googleplaystore.csv"
# CSV dosyasını oku
veri <- read.csv(dosya_yolu)
veri_temizlenmis <- na.omit(veri)
veri_temizlenmis <- veri_temizlenmis[, c("Category", "Installs","Rating")]
veri_temizlenmis <- subset(veri_temizlenmis, Rating >= 1 & Rating <= 5)
veri_temizlenmis$Installs <- as.numeric(gsub("[+,]", "", veri_temizlenmis$Installs))
veri_filtreli <- subset(veri_temizlenmis, Rating >= 4 & Rating <= 5)
veri_filtreli <- subset(veri_filtreli, Installs > 1000000)
veri_filtreli <- data.frame(veri_filtreli)
gruplu_veri_installs <- aggregate(Installs ~ Category, data = veri_filtreli,
FUN = function(x) c(Toplam_Indirme = sum(x)/1000000,
Tum_Indirme_Orani = round(100 * sum(x) / sum(veri_filtreli$Installs), 2)))
gruplu_veri_rating <- aggregate(Rating ~ Category, data = veri_filtreli,
FUN = function(x) c(Ortalama_Rating = round(mean(x),2)))
gruplu_veri_sayilar <- aggregate(Rating ~ Category, data = veri_filtreli, FUN = length)
gruplu_veri$Market_Share_per_App <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
gruplu_veri_installs <- aggregate(Installs ~ Category, data = veri_filtreli,
FUN = function(x) c(Toplam_Indirme = sum(x)/1000000,
Tum_Indirme_Orani = round(100 * sum(x) / sum(veri_filtreli$Installs), 2)))
gruplu_veri_rating <- aggregate(Rating ~ Category, data = veri_filtreli,
FUN = function(x) c(Ortalama_Rating = round(mean(x),2)))
gruplu_veri_sayilar <- aggregate(Rating ~ Category, data = veri_filtreli, FUN = length)
gruplu_filtreli$Market_Share_per_App <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
# CSV dosyasının yolunu belirtin
dosya_yolu <- "C:/Users/ugurxaslan/Desktop/final_çevik/googleplaystore.csv"
# CSV dosyasını oku
veri <- read.csv(dosya_yolu)
veri_temizlenmis <- na.omit(veri)
veri_temizlenmis <- veri_temizlenmis[, c("Category", "Installs","Rating")]
veri_temizlenmis <- subset(veri_temizlenmis, Rating >= 1 & Rating <= 5)
veri_temizlenmis$Installs <- as.numeric(gsub("[+,]", "", veri_temizlenmis$Installs))
veri_filtreli <- subset(veri_temizlenmis, Rating >= 4 & Rating <= 5)
veri_filtreli <- subset(veri_filtreli, Installs > 1000000)
veri_filtreli <- data.frame(veri_filtreli)
gruplu_veri_installs <- aggregate(Installs ~ Category, data = veri_filtreli,
FUN = function(x) c(Toplam_Indirme = sum(x)/1000000,
Tum_Indirme_Orani = round(100 * sum(x) / sum(veri_filtreli$Installs), 2)))
gruplu_veri_rating <- aggregate(Rating ~ Category, data = veri_filtreli,
FUN = function(x) c(Ortalama_Rating = round(mean(x),2)))
gruplu_veri_sayilar <- aggregate(Rating ~ Category, data = veri_filtreli, FUN = length)
gruplu_veri$Market_Share_per_App <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
colnames(gruplu_veri_sayilar)[2] <- "Count"
gruplu_veri <- merge(gruplu_veri_installs, gruplu_veri_rating, by = "Category")
gruplu_veri <- merge(gruplu_veri, gruplu_veri_sayilar, by = "Category")
gruplu_veri$Market_Share<-gruplu_veri$Installs[,2]
gruplu_veri$Installs<-gruplu_veri$Installs[,1]
names(gruplu_veri)[names(gruplu_veri) == "Installs"] <- "Installs_Million"
gruplu_veri$Market_Share_per_App <- round(gruplu_veri$Market_Share/gruplu_veri$Count,2)
rm(gruplu_veri_installs,gruplu_veri_rating,gruplu_veri_sayilar,veri,veri_temizlenmis,dosya_yolu)
View(gruplu_veri)
plot(gruplu_veri$Count,gruplu_veri$Count)
plot(gruplu_veri$Count,gruplu_veri$Market_Share_per_App)
View(veri_filtreli)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
View(veri_temizlenmis)
getwd()
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
View(gruplu_veri)
View(veri_filtreli)
View(veri_temizlenmis)
veri <- data.frame(read.csv(dosya_yolu))
dosya_yolu <- "googleplaystore.csv"
veri <- data.frame(read.csv(dosya_yolu))
View(veri)
View(veri)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
View(gruplu_veri)
#Gerekli kütüphaneleri dahil ettik
library(readr)
install.packages("readr","dplyr","ggplot2")
#Gerekli kütüphaneleri dahil ettik
library(readr)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
install.packages("readr")
install.packages("dplyr")
install.packages("dplyr")
install.packages(ggplot2)
install.packages("ggplot2)
install.packages("ggplot2")
#Gerekli kütüphaneleri dahil ettik
library(readr)
library(dplyr)
library(ggplot2)
#Veri setimizi rawData değişkenine atadık
path <- file.path("C:/Users/mhmmt/OneDrive/Masaüstü/cost-of-living_v2.csv")
rawData <- readr::read_csv(path)
#Gerekli kütüphaneleri dahil ettik
library(readr)
library(dplyr)
library(ggplot2)
#Veri setimizi rawData değişkenine atadık
path <- file.path("C:/Users/mhmmt/OneDrive/Masaüstü/cost-of-living_v2.csv")
rawData <- readr::read_csv(path)
#Gerekli kütüphaneleri dahil ettik
library(readr)
library(dplyr)
library(ggplot2)
#Veri setimizi rawData değişkenine atadık
path <- file.path("cost-of-living_v2.csv")
rawData <- readr::read_csv(path)
#Veri setini analiz etmek
numberOfRow <- nrow(rawData)
numberOfRowFilteredData <- rawData %>% filter(country == "Turkey") %>% nrow()
numberOfCostData <- rawData %>% select(starts_with("x")) %>% ncol()
previewData <- rawData
filteredPreviewData <- rawData %>% filter(country == "Turkey")
#Gerekli kütüphaneleri dahil ettik
library(readr)
library(dplyr)
library(ggplot2)
#Veri setimizi rawData değişkenine atadık
path <- file.path("cost-of-living_v2.csv")
rawData <- readr::read_csv(path)
#Veri setini analiz etmek
numberOfRow <- nrow(rawData)
numberOfRowFilteredData <- rawData %>% filter(country == "Turkey") %>% nrow()
numberOfCostData <- rawData %>% select(starts_with("x")) %>% ncol()
previewData <- rawData
filteredPreviewData <- rawData %>% filter(country == "Turkey")
View(rawData)
View(filteredPreviewData)
#Veri setimizi rawData değişkenine atadık
path <- file.path("cost-of-living_v2.csv")
rawData <- readr::read_csv(path)
#Veri setini analiz etmek
numberOfRow <- nrow(rawData)
View(rawData)
numberOfRowFilteredData <- rawData %>% filter(country == "Turkey") %>% nrow()
numberOfCostData <- rawData %>% select(starts_with("x")) %>% ncol()
previewData <- rawData
View(previewData)
filteredPreviewData <- rawData %>% filter(country == "Turkey")
View(filteredPreviewData)
<br>
Veri seti [Kaggle](https://www.kaggle.com/) web sitesinden
previewData
numberOfRow
numberOfRow
-   Toplam satır sayısı: `r numberOfRow` adettir.
numberOfRow
numberOfRowFilteredData
numberOfCostData
| Sütun        | Açıklama                                                                           |
-   Sütunlarda bulunan maliyet parametrelerinin geldikleri mana
-   Sütunlarda bulunan maliyet parametrelerinin geldikleri mana
Maliyet parametreleri uzun parametrelere karşılık geldiğinden veri
<br>
<br>
filteredPreviewData
View(filteredPreviewData)
dosya_yolu <- "googleplaystore.csv"
veri <- data.frame(read.csv(dosya_yolu))
nrow(veri)
ncol(veri)
```{r echo=FALSE, message=FALSE, warning=FALSE}
```{r echo=FALSE, message=FALSE, warning=FALSE}
- Satir sayisi : `r nrow(veri)`
```{r echo=FALSE, message=FALSE, warning=FALSE}
```{r echo=FALSE, message=FALSE, warning=FALSE}
veri
- Satir sayisi : `r nrow(veri)`
hist(gruplu_veri$Count,gruplu_veri$Market_Share_per_App)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
hist(gruplu_veri$Count,gruplu_veri$Market_Share_per_App)
hist(gruplu_veri$Count)
hist(gruplu_veri$Count)
hist(gruplu_veri$Market_Share)
hist(gruplu_veri$Market_Share)
hist(gruplu_veri$Market_Share)
hist(gruplu_veri$Market_Share)
plot(gruplu_veri$Market_Share,gruplu_veri$Count)
plot(gruplu_veri$Market_Share,gruplu_veri$Count)
source("C:/Users/ugurxaslan/Desktop/final_çevik/test.R")
hist(gruplu_veri$Count)
hist(gruplu_veri$Installs_Million)
hist(myDF$Age, breaks = 20)
veri
#Kütüphaleneri dahil ettim eğer localde indirmediyseniz install.packages("package.name") kullanınız.
library(readr)
library(dplyr)
library(ggplot2)
#googleplaystore.csv dosyasının çalışma dizinide mevcut olması gerekir.
dosya_yolu <- "googleplaystore.csv"
veri <- data.frame(read.csv(dosya_yolu))
View(veri)
nrow(veri)
hist(myDF$Age, breaks = 20)
hist(veri$Rating, breaks = 20)
hist(veri$Rating, breaks = 50)
hist(veri$Rating, breaks = 100)
hist(veri$Rating, breaks = 1000)
hist(veri$Rating, breaks = 100000)
plot(veri$Rating, breaks = 100000)
plot(veri$Rating, breaks = 1000)
plot(veri$Rating, breaks = 1000)
plot(veri$Rating, breaks = 10)
plot(veri$Rating, breaks = 0)
plot(veri$Rating, breaks = 0)
plot(veri$Installs, breaks = 0)
plot(veri$Installs)
hist(veri$Installs)
hist(veri$Rating)
